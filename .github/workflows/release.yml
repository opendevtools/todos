name: Release

on:
  push:
    branches:
      - main

# Cancel previously running workflows
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    runs-on: ubuntu-latest
    outputs:
      release: ${{ steps.semantic.outputs.new_release_version }}
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Rust (nightly)
        uses: dtolnay/rust-toolchain@nightly
        id: rust-toolchain
        with:
          components: rustfmt, clippy

      - name: Cache cargo
        uses: actions/cache@v3
        id: cache-cargo
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.cachekey }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Run tests
        run: cargo test --locked

      - name: Run linting
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Check formatting
        run: cargo fmt --all -- --check

  # Analyze commits and determine if a new release should be published
  # If a new release should be published, the next version is outputted
  next-version:
    name: Get next version
    runs-on: ubuntu-latest
    outputs:
      new_release_version: ${{ steps.semantic.outputs.new_release_version }}
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install semantic-release-cargo
        uses: taiki-e/install-action@v2
        with:
          tool: semantic-release-cargo@2

      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v3
        id: semantic
        with:
          dry_run: true
          semantic_version: 17.1.1
          extra_plugins: |
            @semantic-release/changelog@5.0.1
            @semantic-release/exec@5.0
            @semantic-release/git@9.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

      - name: New release should be published
        if: steps.semantic.outputs.new_release_published == 'true'
        run: |
          echo ${{ steps.semantic.outputs.new_release_version }}

  build:
    name: Build (Apple Silicon)
    needs: [test, next-version]
    if: needs.next-version.outputs.new_release_published == 'true'
    runs-on: macOS-latest
    outputs:
      sha: ${{ steps.release.outputs.SHA }}
    env:
      NAME: todos-aarch64-apple-darwin
      TARGET: aarch64-apple-darwin
      CARGO: cargo

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Rust (nightly)
        uses: dtolnay/rust-toolchain@nightly
        id: rust-toolchain
        with:
          target: ${{ env.TARGET }}

      - name: Cache cargo
        uses: actions/cache@v3
        id: cache-cargo
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.cachekey }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Install semantic-release-cargo
        uses: taiki-e/install-action@v2
        with:
          tool: semantic-release-cargo@2

      - name: Prepare semantic-release for Rust
        run: semantic-release-cargo prepare ${{ needs.next-version.outputs.new_release_version }}

      - name: Install cross
        uses: taiki-e/install-action@v2
        with:
          tool: cross

      - name: Configure cross
        run: echo "CARGO=cross" >> "$GITHUB_ENV"

      - name: Compile release binary
        run: ${{ env.CARGO }} build --bin todos --release --target ${{ env.TARGET }}

      - name: Create release archive
        id: release
        run: |
          mkdir "$NAME"
          cp target/${{ env.TARGET }}/release/todos "$NAME/"
          cp README.md "$NAME/"
          tar -czvf "$NAME.tar.gz" "$NAME"
          SHA=$(shasum -a 256 "$NAME.tar.gz" | cut -d " " -f 1)
          echo "SHA=$SHA" >> $GITHUB_OUTPUT

      - name: Upload release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.TARGET }}
          path: ${{ env.NAME }}.tar.gz
          if-no-files-found: error
          retention-days: 1

  release:
    name: Create release
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download release artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: ls artifacts
        run: ls -R ./artifacts

      - name: Install semantic-release-cargo
        uses: taiki-e/install-action@v2
        with:
          tool: semantic-release-cargo@2

      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v3
        id: semantic
        with:
          semantic_version: 17.1.1
          extra_plugins: |
            @semantic-release/changelog@5.0.1
            @semantic-release/exec@5.0
            @semantic-release/git@9.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  homebrew:
    name: Publish on Homebrew
    runs-on: ubuntu-latest
    if: needs.next-version.outputs.new_release_published == 'true'
    needs: [next-version, build, release]
    env:
      SHA: ${{ needs.build.outputs.sha }}
      VERSION: ${{ needs.next-version.outputs.new_release_version }}
    steps:
      - name: Checkout Homebrew formula
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          fetch-depth: 0
          repository: opendevtools/homebrew-todos
          path: homebrew-todos

      - name: Create template file
        uses: "finnp/create-file-action@master"
        env:
          FILE_NAME: "homebrew-todos/template.rb"
          FILE_BASE64: "Y2xhc3MgVG9kb3MgPCBGb3JtdWxhCiAgdmVyc2lvbiAie3t2ZXJzaW9ufX0iCiAgZGVzYyAiQSBDTEkgdG9vbCB0byBmaW5kIFRPRE9zIGluIHlvdXIgY29kZS4iCiAgaG9tZXBhZ2UgImh0dHBzOi8vZ2l0aHViLmNvbS9vcGVuZGV2dG9vbHMvdG9kb3MiCiAgdXJsICJodHRwczovL2dpdGh1Yi5jb20vb3BlbmRldnRvb2xzL3RvZG9zL3JlbGVhc2VzL2Rvd25sb2FkL3Yje3ZlcnNpb259L3RvZG9zLSN7dmVyc2lvbn0tYWFyY2g2NC1hcHBsZS1kYXJ3aW4udGFyLmd6IgogIHNoYTI1NiAie3tzaGF9fSIKCiAgZGVmIGluc3RhbGwKICAgIGJpbi5pbnN0YWxsICJ0b2RvcyIKICBlbmQKZW5k"

      - name: Update Homebrew formula
        working-directory: ./homebrew-todos
        run: |
          git config --local user.name github-actions
          git config --local user.email github-actions@github.com
          cat template.rb | sed -e 's/{{version}}/'"$VERSION"'/g' -e 's/{{sha}}/'"$SHA"'/g' > Formula/todos.rb
          rm template.rb
          git commit -am "feat(release): $VERSION"

      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          directory: ./homebrew-todos
          github_token: ${{ secrets.TODOS_HOMEBREW_PAT }}
          branch: master
          repository: opendevtools/homebrew-todos
